import numpy as np
import pandas as pd

column_list = ['label'
,'query_id'
,'covered query term number - body'
,'covered query term number - anchor'
,'covered query term number - title'
,'covered query term number - url'
,'covered query term number - whole document'
,'covered query term ratio - body'
,'covered query term ratio - anchor'
,'covered query term ratio - title'
,'covered query term ratio - url'
,'covered query term ratio - whole document'
,'stream length - body'
,'stream length - anchor'
,'stream length - title'
,'stream length - url'
,'stream length - whole document'
,'IDF(Inverse document frequency) - body'
,'IDF(Inverse document frequency) - anchor'
,'IDF(Inverse document frequency) - title'
,'IDF(Inverse document frequency) - url'
,'IDF(Inverse document frequency) - whole document'
,'sum of term frequency - body'
,'sum of term frequency - anchor'
,'sum of term frequency - title'
,'sum of term frequency - url'
,'sum of term frequency - whole document'
,'min of term frequency - body'
,'min of term frequency - anchor'
,'min of term frequency - title'
,'min of term frequency - url'
,'min of term frequency - whole document'
,'max of term frequency - body'
,'max of term frequency - anchor'
,'max of term frequency - title'
,'max of term frequency - url'
,'max of term frequency - whole document'
,'mean of term frequency - body'
,'mean of term frequency - anchor'
,'mean of term frequency - title'
,'mean of term frequency - url'
,'mean of term frequency - whole document'
,'variance of term frequency - body'
,'variance of term frequency - anchor'
,'variance of term frequency - title'
,'variance of term frequency - url'
,'variance of term frequency - whole document'
,'sum of stream length normalized term frequency - body'
,'sum of stream length normalized term frequency - anchor'
,'sum of stream length normalized term frequency - title'
,'sum of stream length normalized term frequency - url'
,'sum of stream length normalized term frequency - whole document'
,'min of stream length normalized term frequency - body'
,'min of stream length normalized term frequency - anchor'
,'min of stream length normalized term frequency - title'
,'min of stream length normalized term frequency - url'
,'min of stream length normalized term frequency - whole document'
,'max of stream length normalized term frequency - body'
,'max of stream length normalized term frequency - anchor'
,'max of stream length normalized term frequency - title'
,'max of stream length normalized term frequency - url'
,'max of stream length normalized term frequency - whole document'
,'mean of stream length normalized term frequency - body'
,'mean of stream length normalized term frequency - anchor'
,'mean of stream length normalized term frequency - title'
,'mean of stream length normalized term frequency - url'
,'mean of stream length normalized term frequency - whole document'
,'variance of stream length normalized term frequency - body'
,'variance of stream length normalized term frequency - anchor'
,'variance of stream length normalized term frequency - title'
,'variance of stream length normalized term frequency - url'
,'variance of stream length normalized term frequency - whole document'
,'sum of tf*idf - body'
,'sum of tf*idf - anchor'
,'sum of tf*idf - title'
,'sum of tf*idf - url'
,'sum of tf*idf - whole document'
,'min of tf*idf - body'
,'min of tf*idf - anchor'
,'min of tf*idf - title'
,'min of tf*idf - url'
,'min of tf*idf - whole document'
,'max of tf*idf - body'
,'max of tf*idf - anchor'
,'max of tf*idf - title'
,'max of tf*idf - url'
,'max of tf*idf - whole document'
,'mean of tf*idf - body'
,'mean of tf*idf - anchor'
,'mean of tf*idf - title'
,'mean of tf*idf - url'
,'mean of tf*idf - whole document'
,'variance of tf*idf - body'
,'variance of tf*idf - anchor'
,'variance of tf*idf - title'
,'variance of tf*idf - url'
,'variance of tf*idf - whole document'
,'boolean model - body'
,'boolean model - anchor'
,'boolean model - title'
,'boolean model - url'
,'boolean model - whole document'
,'vector space model - body'
,'vector space model - anchor'
,'vector space model - title'
,'vector space model - url'
,'vector space model - whole document'
,'BM25 - body'
,'BM25 - anchor'
,'BM25 - title'
,'BM25 - url'
,'BM25 - whole document'
,'LMIR.ABS - body'
,'LMIR.ABS - anchor'
,'LMIR.ABS - title'
,'LMIR.ABS - url'
,'LMIR.ABS - whole document'
,'LMIR.DIR - body'
,'LMIR.DIR - anchor'
,'LMIR.DIR - title'
,'LMIR.DIR - url'
,'LMIR.DIR - whole document'
,'LMIR.JM - body'
,'LMIR.JM - anchor'
,'LMIR.JM - title'
,'LMIR.JM - url'
,'LMIR.JM - whole document'
,'Number of slash in URL'
,'Length of URL'
,'Inlink number'
,'Outlink number'
,'PageRank'
,'SiteRank'
,'QualityScore'
,'QualityScore2'
,'Query-url click count'
,'url click count'
,'url dwell time'
,'Unnamed']

def make_rank_data_csv(fpath, fold_no, dataset):
    with open("{fpath}/MSLR-WEB10K/Fold{fold_no}/{dataset}.txt".format(fpath=fpath, fold_no=fold_no, dataset=dataset), "rb") as file:
        df = pd.read_csv(file, sep=" ", header=None)
        df.columns = column_list

        # Drop unnamed columns as they are NaNs
        df['Unnamed'].value_counts(dropna=False)

        data = df.ix[:,0:-1]

        # Strip keys from entries 
        for column in column_list[1:-1]:
            data[column] = data[column].map(lambda x: x.split(':')[-1])

        data.to_csv("{fpath}/{dataset}_fld{fold_no}_df.csv".format(fpath=fpath, dataset=dataset, fold_no=fold_no))
